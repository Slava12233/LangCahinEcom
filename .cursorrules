# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- קובץ ה-.env צריך להיות בתיקייה הראשית של הפרויקט, לא בתיקיית src
- 
## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- בעבודה עם DeepSeek API:
    - יש להשתמש רק בפרמטרים הנתמכים: model, messages, temperature, max_tokens
    - אין להשתמש בפרמטרים כמו functions, presence_penalty, frequency_penalty
    - יש להגדיר timeout מתאים (30 שניות) ומנגנון retry למקרה של כישלון
    - כדאי להשתמש במטמון (cache) לתשובות כדי לחסוך בקריאות API ולשפר את זמני התגובה
- בעבודה עם בוט טלגרם:
    - חשוב לתת תשובות מועילות גם בלי גישה למידע מהחנות
    - יש להבהיר למשתמש מה הבוט יכול ולא יכול לעשות
    - יש לשמור על זהות עקבית כמומחה לניהול חנות
    - יש להשתמש באימוג'ים בצורה מדודה ומקצועית

# Scratchpad

## Current Task: הקמת פרויקט חנות חכמה עם בוט טלגרם ו-LangChain

### שלב 1: הקמת תשתית בסיסית (הושלם ✅)
[X] 1. הקמת פרויקט חדש והגדרת requirements.txt
[X] 2. יצירת מבנה קבצים ראשוני
[X] 3. הגדרת משתני סביבה
[X] 4. כתיבת הבוט הראשוני
[X] 5. סוכן ראשי ראשוני
[X] 6. חיבור הסוכן לבוט
[X] 7. הרצה ובדיקה ראשונית
[X] 8. העברת קובץ .env לתיקייה הראשית

### שלב 2: הוספת תשתית לוגים (הושלם ✅)
[X] 1. הגדרת מערכת לוגים מרכזית
    [X] - יצירת תיקיית logs
    [X] - הגדרת מבנה קבצי לוג (יומי, לפי רמות, וכו')
    [X] - הגדרת פורמט לוגים אחיד
[X] 2. הוספת לוגים בכל הרכיבים
    [X] - לוגים בבוט הטלגרם
    [X] - לוגים ב-Orchestrator
    [X] - לוגים ב-WooCommerce Agent
[X] 3. הוספת מידע שימושי ללוגים
    [X] - מזהה שיחה ייחודי
    [X] - זמני ביצוע
    [X] - שגיאות מפורטות
    [X] - מידע על המשתמש
[X] 4. הגדרת רמות לוג שונות
    [X] - DEBUG למידע מפורט
    [X] - INFO לפעולות רגילות
    [X] - WARNING לבעיות קלות
    [X] - ERROR לשגיאות חמורות
[X] 5. הוספת ניטור וניתוח
    [X] - שמירת מטריקות ביצועים
    [X] - התראות על שגיאות חריגות
    [X] - סטטיסטיקות שימוש

### שלב 3: שיפור חווית המשתמש (הושלם ✅)
[X] 1. שיפור הטיפול בשגיאות
    [X] - הוספת מנגנון retry
    [X] - הגדרת timeout
    [X] - טיפול במקרי קצה
[X] 2. שיפור הפרומפטים
    [X] - הגדרת פרומפט בסיסי ברור
    [X] - התאמת פרומפטים לפי סוג המשימה
    [X] - הוספת הבהרות לגבי יכולות נוכחיות ועתידיות
[X] 3. אופטימיזציה של המטמון
    [X] - שיפור מנגנון ה-Cache
    [X] - הגדרת TTL מתאים
    [X] - טיפול נכון במקרי קצה
[X] 4. שיפור זיהוי המשימות
    [X] - הרחבת מילות המפתח
    [X] - זיהוי הקשר שיחה
    [X] - טיפול בשאלות מורכבות

### שלב 4: הוספת יכולות WooCommerce (בתהליך 🔄)
[ ] 1. הגדרת פעולות בסיסיות
    [ ] - קבלת מידע על מוצרים
    [ ] - בדיקת סטטוס הזמנות
    [ ] - הפקת דוחות מכירה
[ ] 2. הוספת LangChain Agent
    [ ] - הגדרת Tools ל-WooCommerce
    [ ] - יצירת פרומפטים חכמים
    [ ] - חיבור ל-API של WooCommerce
[ ] 3. הוספת בדיקות אוטומטיות
    [ ] - בדיקות יחידה
    [ ] - בדיקות אינטגרציה

### הערות חשובות:
1. הבוט כרגע עובד ומסוגל:
   - לענות על שאלות כלליות בנושא ניהול חנות
   - להסביר את יכולותיו הנוכחיות והעתידיות
   - לתת תשובות מקצועיות גם בלי גישה למידע מהחנות

2. נקודות לשיפור:
   - שיפור זיהוי סוג המשימה
   - הוספת יכולות אינטגרציה עם WooCommerce
   - הוספת בדיקות אוטומטיות
   - שיפור הטיפול בשיחות ארוכות

3. תובנות מהפיתוח:
   - חשוב לשמור על איזון בין תשובות מהירות לתשובות מדויקות
   - המטמון עוזר לשפר ביצועים אבל צריך להיזהר מתשובות לא רלוונטיות
   - הפרומפטים צריכים להיות ברורים וממוקדים